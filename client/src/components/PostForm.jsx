import React, { useState, useEffect, useRef } from "react";
import { useNavigate } from "react-router-dom";
import { RichTextarea } from "rich-textarea";
import { jwtDecode } from "jwt-decode";
import { HiGif } from "react-icons/hi2";
import { IoClose } from "react-icons/io5";
import * as BsIcons from "react-icons/bs";
import { FaImage, FaBold, FaItalic, FaUnderline } from "react-icons/fa";
import { getUserProfile } from "../api/userApi";
import { saveUploadFile } from "../api/userApi";
import { createPost } from "../api/postApi";
import "../styles/components/PostForm.css";

const emojiNames = [
  "BsEmojiAngry",
  "BsEmojiAstonished",
  "BsEmojiDizzy",
  "BsEmojiExpressionless",
  "BsEmojiFrown",
  "BsEmojiGrimace",
  "BsEmojiGrin",
  "BsEmojiHeartEyes",
  "BsEmojiKiss",
  "BsEmojiLaughing",
  "BsEmojiNeutral",
  "BsEmojiSmile",
  "BsEmojiSmileUpsideDown",
  "BsEmojiSunglasses",
  "BsEmojiSurprise",
  "BsEmojiTear",
  "BsEmojiWink"
];

const emojis = {
  smileys: [
    "üòÇ",
    "üòç",
    "üòÅ",
    "üò¢",
    "üò†",
    "üòé",
    "üòû",
    "üò±",
    "üòè",
    "üòò",
    "üò¨",
    "üòÑ",
    "üòá",
    "üòë",
    "üòú",
    "üòµ",
    "ü§ó",
    "üòà",
    "üò¥",
    "ü§î",
    "üòÆ",
    "üòÖ"
  ],
  reactions: ["üëç", "üëé", "üëè", "üéâ", "ü•≥", "ü§©", "ü§Ø", "üò±", "üíî", "üò¥"],
  sports: ["‚öΩÔ∏è", "üèÄ", "üèà", "‚öæÔ∏è", "üéæ", "üèê", "üèâ", "üèè", "üèì", "üé±"],
  animals: [
    "üê∂",
    "üê±",
    "üê≠",
    "üêπ",
    "üê∞",
    "üêª",
    "üêº",
    "ü¶Å",
    "üêØ",
    "üêò",
    "üêß",
    "üê¨",
    "ü¶ä",
    "üê∏",
    "ü¶Ñ"
  ],
  food: ["üçï", "üçî", "üç£", "üç©", "üç¶", "üå≠", "üçâ", "üçè", "üç™", "ü•ë"],
  nature: ["üåà", "üå≥", "üåº", "üåä", "üåû", "üåô", "üåå", "üèîÔ∏è", "üçÇ", "üåª"],
  vehicles: ["üöó", "üöå", "üöï", "üöô", "‚úàÔ∏è", "üö¢", "üöé", "üö≤", "üèçÔ∏è", "üöÄ"],
  objects: ["üíª", "üì±", "‚åö", "üì∑", "üîë", "üí°", "üéí", "üìÖ", "üßä", "üß≠"],
  symbols: ["‚ù§Ô∏è", "‚≠ê", "üíØ", "üîî", "‚ö°Ô∏è", "üîû", "üö´", "‚úîÔ∏è", "‚ùå", "üîë"],
  fun: ["üéâ", "ü•≥", "üí©", "üö©", "üöÄ", "üéà", "ü§π‚Äç‚ôÇÔ∏è", "üé≠", "üëæ", "ü™Ö"],
  hearts: ["‚ù§Ô∏è", "üíõ", "üíö", "üíô", "üíú", "üß°", "ü§é", "üñ§", "üíî", "üíï"],
  countries: [
    "üá∫üá¶",
    "üá∫üá∏",
    "üá¨üáß",
    "üá©üá™",
    "üá´üá∑",
    "üáÆüáπ",
    "üá™üá∏",
    "üá®üá¶",
    "üáßüá∑",
    "üáØüáµ",
    "üá∞üá∑",
    "üá¶üá∫",
    "üá®üá≥",
    "üáÆüá≥"
  ]
};

export default function PostForm() {
  const [emojiSvg, setEmojiSvg] = useState(getRandomEmojiSvg());
  const [text, setText] = useState("");
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [formatting, setFormatting] = useState([]);
  const textareaRef = useRef(null);
  const navigate = useNavigate();
  const [selectedImage, setSelectedImage] = useState(null);
  const fileInputRef = useRef(null);

  const [user, setUser] = useState(null);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ–≤—ñ–¥–Ω–∏–∫–∞ —Ñ–∞–π–ª—ñ–≤
  const handleAddMediaClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click(); // –í–∏–∫–ª–∏–∫–∞—î–º–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–π —ñ–Ω–ø—É—Ç
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É
  const handleFileChange = event => {
    const file = event.target.files[0];
    if (file) {
      const imageUrl = URL.createObjectURL(file);
      setSelectedImage(imageUrl); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    }
  };

  const getUsernameFromToken = () => {
    const token = localStorage.getItem("token");
    if (token) {
      const decoded = jwtDecode(token);
      return decoded.username; // –ó–∞–º—ñ—Å—Ç—å —Ü—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–ª—é—á, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ç–æ–∫–µ–Ω—ñ
    }
    return null;
  };

  const getUserIdFromToken = () => {
    const token = localStorage.getItem("token");
    if (token) {
      const decoded = jwtDecode(token);
      return decoded._id; // –ó–∞–º—ñ—Å—Ç—å —Ü—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–ª—é—á, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ç–æ–∫–µ–Ω—ñ
    }
    return null;
  };

  useEffect(() => {
    const fetchUserProfile = async () => {
      try {
        const username = getUsernameFromToken();
        const data = await getUserProfile(username);
        setUser(data);
      } catch (error) {
        console.error("Error fetching user profile:", error);
      }
    };

    fetchUserProfile();
  }, []);

  if (!user) {
    return <div>Loading...</div>;
  }

  function getRandomEmojiSvg() {
    const randomIconName =
      emojiNames[Math.floor(Math.random() * emojiNames.length)];
    return BsIcons[randomIconName]();
  }

  const handleTextChange = e => {
    const { value } = e.target;
    setText(value);
  };

  const applyFormatting = type => {
    const textarea = textareaRef.current;
    if (textarea) {
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const selectedText = text.slice(start, end);

      if (selectedText) {
        setFormatting(prevFormatting => {
          let newFormatting = [...prevFormatting];

          // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—É
          newFormatting = newFormatting.filter(
            f => !(f.start < end && f.end > start)
          );

          newFormatting.push({ start, end, [type]: true });

          return newFormatting;
        });
      }
    }

    // –°–ª—É—Ö–∞—á –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
    textarea.addEventListener("input", () => {
      const newCursorPosition = textarea.selectionStart;

      setFormatting(prevFormatting => {
        // –Ø–∫—â–æ –Ω–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏ –≤–≤–æ–¥—è—Ç—å—Å—è –ø—ñ—Å–ª—è —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É, –Ω–µ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
        let updatedFormatting = [...prevFormatting];

        updatedFormatting = updatedFormatting.map(format => {
          // –Ø–∫—â–æ –Ω–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏ –≤–≤–æ–¥—è—Ç—å—Å—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É, –∑—É–ø–∏–Ω—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ —Ü—å–æ–º—É –º—ñ—Å—Ü—ñ
          if (
            newCursorPosition < format.end &&
            newCursorPosition >= format.start
          ) {
            return { ...format, end: newCursorPosition };
          }
          return format;
        });

        return updatedFormatting;
      });
    });
  };

  const renderText = value => {
    let result = [];
    let lastIndex = 0;

    formatting
      .sort((a, b) => a.start - b.start)
      .forEach((format, index) => {
        if (format.start > lastIndex) {
          result.push(
            <span key={`text-${lastIndex}`}>
              {value.slice(lastIndex, format.start)}
            </span>
          );
        }

        const style = {};
        if (format.bold) style.fontWeight = "bold";
        if (format.italic) style.fontStyle = "italic";
        if (format.underline) style.textDecoration = "underline"; // –î–æ–¥–∞—î–º–æ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è

        result.push(
          <span key={`formatted-${index}`} style={style}>
            {value.slice(format.start, format.end)}
          </span>
        );

        lastIndex = format.end;
      });

    if (lastIndex < value.length) {
      result.push(
        <span key={`text-${lastIndex}`}>{value.slice(lastIndex)}</span>
      );
    }

    return <>{result}</>;
  };

  const handleEmojiClick = emoji => {
    const textarea = textareaRef.current;
    const cursorPosition = textarea.selectionStart;

    const newText =
      text.slice(0, cursorPosition) + emoji + text.slice(cursorPosition);
    setText(newText);

    setTimeout(() => {
      textarea.selectionStart = textarea.selectionEnd =
        cursorPosition + emoji.length;
      textarea.focus();
    }, 0);

    setShowEmojiPicker(false);
  };

  const optimizeText = text => {
    // –°—Ç–≤–æ—Ä—é—î–º–æ HTML-—Ç–µ–≥–∏ –∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
    let exportText = text
      .replace(/\*\*(.*?)\*\*/g, "<b>$1</b>") // Bold
      .replace(/_(.*?)_/g, "<i>$1</i>") // Italic
      .replace(/~(.*?)~/g, "<u>$1</u>"); // Underline

    // –î–æ–¥–∞—î–º–æ —Ç–µ–≥ <a> –¥–ª—è –ø–æ—Å–∏–ª–∞–Ω—å
    exportText = exportText.replace(
      /(?:(https?:\/\/|www\.)[^\s]+)/g,
      '<a href="$&" target="_blank">$&</a>'
    );

    // –í–∏–¥–∞–ª—è—î–º–æ –ø—É—Å—Ç—ñ —Ç–µ–≥–∏
    exportText = exportText
      .replace(/<b>(\s*)<\/b>/g, "") // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ <b>
      .replace(/<i>(\s*)<\/i>/g, "") // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ <i>
      .replace(/<u>(\s*)<\/u>/g, "") // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ <u>
      .replace(/<a>(\s*)<\/a>/g, ""); // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ <a>

    // –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –≤–∏–ø–∞–¥–∫–∏, –∫–æ–ª–∏ –∑–∞–∫—Ä–∏–≤–∞—é—á–∏–π —Ç–µ–≥ –π–¥–µ –±–µ–∑ –≤—ñ–¥–∫—Ä–∏–≤–∞—é—á–æ–≥–æ
    exportText = exportText
      .replace(/<b>(.*?)<\/b>(?=\s*<b>)/g, "$1") // –ó–∞–ª–∏—à–∞—î–º–æ —Ç–µ–∫—Å—Ç –º—ñ–∂ <b> —ñ <b>
      .replace(/<i>(.*?)<\/i>(?=\s*<i>)/g, "$1") // –ó–∞–ª–∏—à–∞—î–º–æ —Ç–µ–∫—Å—Ç –º—ñ–∂ <i> —ñ <i>
      .replace(/<u>(.*?)<\/u>(?=\s*<u>)/g, "$1") // –ó–∞–ª–∏—à–∞—î–º–æ —Ç–µ–∫—Å—Ç –º—ñ–∂ <u> —ñ <u>
      .replace(/<a>(.*?)<\/a>(?=\s*<a>)/g, "$1"); // –ó–∞–ª–∏—à–∞—î–º–æ —Ç–µ–∫—Å—Ç –º—ñ–∂ <a> —ñ <a>

    return exportText;
  };

  const formatPost = () => {
    let exportText = "";
    let lastIndex = 0;

    formatting
      .sort((a, b) => a.start - b.start)
      .forEach(format => {
        exportText += text.slice(lastIndex, format.start).replace(/\*/g, "");

        // –î–æ–¥–∞—î–º–æ —Ç–µ–≥–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
        if (format.bold) exportText += "<b>";
        if (format.italic) exportText += "<i>";
        if (format.underline) exportText += "<u>"; // –î–æ–¥–∞—î–º–æ –¥–ª—è –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è

        exportText += text.slice(format.start, format.end).replace(/\*/g, "");

        // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Ç–µ–≥–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
        if (format.underline) exportText += "</u>"; // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è
        if (format.italic) exportText += "</i>";
        if (format.bold) exportText += "</b>";

        lastIndex = format.end;
      });

    exportText += text.slice(lastIndex).replace(/\*/g, "");

    // –û–ø—Ç–∏–º—ñ–∑—É—î–º–æ —Ç–µ–∫—Å—Ç
    exportText = optimizeText(exportText);
    console.log(exportText);
    return exportText;
  };

  const handleSubmitPost = async () => {
    try {
      let postImage = selectedImage; // –ü–æ—á–∞—Ç–∫–æ–≤–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è

      // –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ –Ω–æ–≤–∏–π —Ñ–∞–π–ª, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –π–æ–≥–æ
      if (selectedImage && fileInputRef.current.files[0]) {
        const uploadResponse = await saveUploadFile(
          fileInputRef.current.files[0]
        );
        postImage = uploadResponse.filePath; // –û—Ç—Ä–∏–º—É—î–º–æ URL –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É
      }

      if (postImage == null) {
        postImage = "";
      }

      const postContent = formatPost(); // –û–ø—Ç–∏–º—ñ–∑—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞, –¥–æ–¥–∞—é—á–∏ —Ç–µ–≥–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è

      // –§–æ—Ä–º—É—î–º–æ –æ–±'—î–∫—Ç –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Å—Ö–µ–º—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
      const newPost = {
        user: getUserIdFromToken(), // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ JWT —Ç–æ–∫–µ–Ω—É
        content: postContent, // –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞
        postImage: postImage // –î–æ–¥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ —î
      };

      console.log("Post data being sent:", newPost);
      await createPost(newPost); // –í–∏–∫–ª–∏–∫–∞—î–º–æ API –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞

      // –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç–∞ –º–æ–∂–Ω–∞ –≤–∏–∫–æ–Ω–∞—Ç–∏ –¥—ñ—ó, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –æ—á–∏—Å—Ç–∏—Ç–∏ —Ñ–æ—Ä–º—É
      setText("");
      setSelectedImage(null);
      fileInputRef.current.value = null; // –û—á–∏—â–∞—î–º–æ –≤–∏–±—ñ—Ä —Ñ–∞–π–ª—É
    } catch (error) {
      console.error("Error creating post:", error); // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
    }
  };

  return (
    <div className="post-form-container">
      <div className="post-form-header">
        <img
          className="post-form-avatar"
          src={user.avatarImage}
          alt="avatar"
          onClick={() => {
            const username = getUsernameFromToken();
            if (username) {
              navigate("/profile/${username}");
            } else {
              // handle case when username is not found
              console.error("Username not found in token");
            }
          }}
        />
        <div className="textarea-wrapper">
          <div className="textarea-placeholder">
            {text.length === 0 && "What is in your mind?"}
          </div>
          <RichTextarea
            ref={textareaRef}
            value={text}
            onChange={handleTextChange}
            rows={4}
            style={{ width: "100%" }}
          >
            {renderText}
          </RichTextarea>
          <p
            className={`post-form-character-counter ${
              text.length === 256 ? "max-length" : ""
            }`}
          >
            {text.length}/256
          </p>
        </div>
      </div>
      {/* –¢—É—Ç –º–∞—î –∑'—è–≤–∏—Ç–∏—Å—å –º–∞–ª–µ–Ω—å–∫–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
      <div>
        <img src="" alt="" id="selected-image" />
      </div> */}
      {selectedImage && (
        <div className="post-form-selected-image">
          <img id="selected-image" src={selectedImage} alt="Selected" />
          <button
            onClick={() => {
              setSelectedImage(null);
            }}
          >
            <IoClose />
          </button>
        </div>
      )}
      <div className="post-form-tool-footer">
        <div className="post-form-tools">
          {/* <button className="post-form-tool-button" title="Add Media">
            <FaImage />
          </button> */}
          {/* –ü—Ä–∏—Ö–æ–≤–∞–Ω–∏–π input –¥–ª—è –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—ñ–≤ */}
          <input
            type="file"
            ref={fileInputRef}
            style={{ display: "none" }}
            onChange={handleFileChange}
            accept="image/*"
          />

          {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –º–µ–¥—ñ–∞ */}
          <button
            className="post-form-tool-button"
            title="Add Media"
            onClick={handleAddMediaClick}
          >
            <FaImage />
          </button>
          {/*  */}
          <button className="post-form-tool-button" title="Add GIF">
            <HiGif />
          </button>
          <button
            className="post-form-tool-button"
            title="Bold Text"
            onClick={() => applyFormatting("bold")}
          >
            <FaBold />
          </button>
          <button
            className="post-form-tool-button"
            title="Italic Text"
            onClick={() => applyFormatting("italic")}
          >
            <FaItalic />
          </button>
          <button
            className="post-form-tool-button"
            title="Add Underline"
            onClick={() => applyFormatting("underline")}
          >
            <FaUnderline />
          </button>
          <button
            className="post-form-tool-button"
            title="Add Emoji"
            onClick={() => {
              setShowEmojiPicker(!showEmojiPicker);
            }}
          >
            {emojiSvg}
          </button>
        </div>
        {showEmojiPicker && (
          <div className="emoji-picker">
            {Object.entries(emojis).map(([category, emojiList]) => (
              <div key={category} className="emoji-category">
                <h4>{category.charAt(0).toUpperCase() + category.slice(1)}</h4>
                {emojiList.map((emoji, index) => (
                  <span
                    key={index}
                    className="emoji"
                    onClick={() => handleEmojiClick(emoji)}
                  >
                    {emoji}
                  </span>
                ))}
              </div>
            ))}
          </div>
        )}
        <div className="post-form-footer">
          <button
            className="post-form-submit-button"
            disabled={!text.trim()}
            onClick={handleSubmitPost}
          >
            Post
          </button>
        </div>
      </div>
    </div>
  );
}
